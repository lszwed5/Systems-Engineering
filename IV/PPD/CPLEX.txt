 int tank_capacity = 15;
 int number_of_cities = 17;
 range cities = 1..number_of_cities;
 								  
 								  
 int distances[cities][cities] = [
 [9999, 3, 5, 48, 48, 8, 8, 5, 5, 3, 3, 0, 3, 5, 8, 8, 5],
 [3, 9999, 3, 48, 48, 8, 8, 5, 5, 0, 0, 3, 0, 3, 8, 8, 5],
 [5, 3, 9999, 72, 72, 48, 48, 24, 24, 3, 3, 5, 3, 0, 48, 48, 24],
 [48, 48, 74, 9999, 0, 6, 6, 12, 12, 48, 48, 48, 48, 74, 6, 6, 12],
 [48, 48, 74, 0, 9999, 6, 6, 12, 12, 48, 48, 48, 48, 74, 6, 6, 12],
 [8, 8, 50, 6, 6, 9999, 0, 8, 8, 8, 8, 8, 8, 50, 0, 0, 8],
 [8, 8, 50, 6, 6, 0, 9999, 8, 8, 8, 8, 8, 8, 50, 0, 0, 8],
 [5, 5, 26, 12, 12, 8, 8, 9999, 0, 5, 5, 5, 5, 26, 8, 8, 0],
 [5, 5, 26, 12, 12, 8, 8, 0, 9999, 5, 5, 5, 5, 26, 8, 8, 0],
 [3, 0, 3, 48, 48, 8, 8, 5, 5, 9999, 0, 3, 0, 3, 8, 8, 5],
 [3, 0, 3, 48, 48, 8, 8, 5, 5, 0, 9999, 3, 0, 3, 8, 8, 5],
 [0, 3, 5, 48, 48, 8, 8, 5, 5, 3, 3, 9999, 3, 5, 8, 8, 5],
 [3, 0, 3, 48, 48, 8, 8, 5, 5, 0, 0, 3, 9999, 3, 8, 8, 5],
 [5, 3, 0, 72, 72, 48, 48, 24, 24, 3, 3, 5, 3, 9999, 48, 48, 24],
 [8, 8, 50, 6, 6, 0, 0, 8, 8, 8, 8, 8, 8, 50, 9999, 0, 8],
 [8, 8, 50, 6, 6, 0, 0, 8, 8, 8, 8, 8, 8, 50, 0, 9999, 8],
 [5, 5, 26, 12, 12, 8, 8, 0, 0, 5, 5, 5, 5, 26, 8, 8, 9999]
];
 						
 dvar float+ u[cities];
 dvar boolean X[cities][cities];


 maximize sum(i, j in cities) X[i][j];
 
 
 subject to {
   sum(i, j in cities) X[i][j] * distances[i][j] <= tank_capacity;
   forall(i in cities) sum(j in cities) X[i][j] <= 1;
   forall(i in cities) sum(j in cities) X[j][i] <= 1;
   forall(i in cities) sum(j in cities) X[i][j] == sum(j in cities) X[j][i];
   forall (i, j in cities : j != 1) u[i] + X[i][j] <= u[j] + (number_of_cities - 1) * (1 - X[i][j]);
   u[1] == 1;
 }
 
 
 execute POSTPROCESS {
    for (var i in cities)
        for (var j in cities)
            if (X[i][j] > 0) write(i, " -> ", j, "\n");
}